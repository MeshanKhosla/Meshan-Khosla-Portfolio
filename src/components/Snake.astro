---
---
<div class="flex flex-col items-center min-h-screen text-white">
  <canvas id="gameCanvas" class="bg-slate-800"></canvas>
  <div class="score" id="score">Score: 0</div>
  <div class="controls grid grid-cols-3 gap-2 mt-4">
    <button id="left-btn" class="btn col-start-1 bg-blue-600 p-2">Left</button>
    <button id="up-btn" class="btn col-start-2 bg-blue-600 p-2">Up</button>
    <button id="right-btn" class="btn col-start-3 bg-blue-600 p-2">Right</button>
    <button id="down-btn" class="btn col-start-2 bg-blue-600 p-2">Down</button>
  </div>
  <div class="text-xs text-gray-400">Use WASD or arrow keys</div>
</div>

<script>
  const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
  const ctx = canvas.getContext('2d');


  const scale = 20;
	canvas.width = canvas.parentElement.clientWidth;
	// When the window is resized, resize the canvas to match
	let rows = canvas.height / scale;
	let columns = canvas.width / scale;
	window.addEventListener('resize', () => {
		canvas.width = canvas.parentElement.clientWidth;

		rows = canvas.height / scale;
		columns = canvas.width / scale;
	});

	window.addEventListener('load', () => {
		console.log('loaded')
	})

	canvas.height = canvas.parentElement.clientHeight / 2;
	
  let snake;
	let fruit;

  (function setup() {
    snake = new Snake();
    fruit = new Fruit();
    fruit.pickLocation();

    window.setInterval(() => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      fruit.draw();
      snake.update();
      snake.draw();

      if (snake.eat(fruit)) {
        fruit.pickLocation();
      }

      snake.checkCollision();
			if (!document.getElementById('score')) return;
      document.getElementById('score').innerText = `Score: ${snake.total}`;
    }, 100); // Adjust the interval for game speed
  }());

  function bindControls() {
    document.getElementById('up-btn').addEventListener('click', () => snake.changeDirection('Up'));
    document.getElementById('down-btn').addEventListener('click', () => snake.changeDirection('Down'));
    document.getElementById('left-btn').addEventListener('click', () => snake.changeDirection('Left'));
    document.getElementById('right-btn').addEventListener('click', () => snake.changeDirection('Right'));

    window.addEventListener('keydown', (evt) => {
      const direction = { 'ArrowUp': 'Up', 'ArrowDown': 'Down', 'ArrowLeft': 'Left', 'ArrowRight': 'Right', 'w': 'Up', 's': 'Down', 'a': 'Left', 'd': 'Right' }[evt.key];
      if (direction) snake.changeDirection(direction);
    });
  }

  bindControls();

  function Snake() {
    this.x = 0;
    this.y = 0;
    this.xSpeed = scale * 1;
    this.ySpeed = 0;
    this.total = 0;
    this.tail = [];

    this.draw = function() {
      ctx.fillStyle = "#F9FAFB";
      for (let i = 0; i < this.tail.length; i++) {
        ctx.fillRect(this.tail[i].x, this.tail[i].y, scale, scale);
      }
      ctx.fillRect(this.x, this.y, scale, scale);
    };

    this.update = function() {
      for (let i = 0; i < this.tail.length - 1; i++) {
        this.tail[i] = this.tail[i + 1];
      }

      if (this.total >= 1) {
        this.tail[this.total - 1] = { x: this.x, y: this.y };
      }

      this.x += this.xSpeed;
      this.y += this.ySpeed;

      // Wrap snake position on edge of the screen for continuous play
      this.x = this.x >= canvas.width ? 0 : this.x < 0 ? canvas.width - scale : this.x;
      this.y = this.y >= canvas.height ? 0 : this.y < 0 ? canvas.height - scale : this.y;
    };

    this.changeDirection = function(direction) {
      switch (direction) {
        case 'Up':
          if (this.ySpeed === 0) { this.xSpeed = 0; this.ySpeed = -scale; }
          break;
        case 'Down':
          if (this.ySpeed === 0) { this.xSpeed = 0; this.ySpeed = scale; }
          break;
        case 'Left':
          if (this.xSpeed === 0) { this.xSpeed = -scale; this.ySpeed = 0; }
          break;
        case 'Right':
          if (this.xSpeed === 0) { this.xSpeed = scale; this.ySpeed = 0; }
          break;
      }
    };

    this.eat = function(fruit) {
      if (this.x === fruit.x && this.y === fruit.y) {
        this.total++;
        return true;
      }
      return false;
    };

    this.checkCollision = function() {
      for (let i = 0; i < this.tail.length; i++) {
        if (this.x === this.tail[i].x && this.y === this.tail[i].y) {
          this.total = 0;
          this.tail = [];
        }
      }
    };
  }

  function Fruit() {
    this.x;
    this.y;

    this.pickLocation = function() {
      this.x = (Math.floor(Math.random() * columns) * scale);
      this.y = (Math.floor(Math.random() * rows) * scale);
    };

    this.draw = function() {
      ctx.fillStyle = "#10B981";
      ctx.fillRect(this.x, this.y, scale, scale);
    };
  }
</script>
