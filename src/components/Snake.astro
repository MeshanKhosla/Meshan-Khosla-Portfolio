---
---
<div>
	<!-- Add 4 buttons to control the snake: up, down, left, and right. These button should be positioned like a plus sign -->
	<div class="flex flex-col w-[200px] mb-3">
		<div class="self-center">
			<button id="up-btn" class="btn bg-sky-700 w-[70px]">Up</button>
		</div>
		<div class="flex justify-between">
			<button id="left-btn" class="btn bg-sky-700 w-[70px]">Left</button>
			<button id="right-btn" class="btn bg-sky-700 w-[70px]">Right</button>
		</div>
		<div class="self-center">
			<button id="down-btn" class="btn bg-sky-700 w-[70px]">Down</button>
		</div>
	</div>
	<text>You can also use WASD or arrow keys</text>

	<canvas class="w-full h-full bg-slate-900" id="canvas"></canvas>

	<p id="score"></p>
</div>

<script>
	
	const canvas = document.getElementById('canvas') as HTMLCanvasElement;
	const ctx = canvas.getContext('2d');
	const scale = 10;
	const rows = canvas.height / scale;
	const columns = canvas.width / scale;
	let snake;
	let fruit;

	(function setup() {
		snake = new Snake();
		fruit = new Fruit();
		fruit.pickLocation();

		window.setInterval(() => {
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			fruit.draw();
			snake.update();
			snake.draw();

			if (snake.eat(fruit)) {
				fruit.pickLocation();
			}

			snake.checkCollision();
			(document.querySelector('#score') as HTMLParagraphElement).innerText = `Score: ${snake.total}`;

		}, 100);
	}());

	document.getElementById('up-btn').addEventListener('click', () => {
		snake.changeDirection('Up');
	});
	document.getElementById('down-btn').addEventListener('click', () => {
		snake.changeDirection('Down');
	});
	document.getElementById('left-btn').addEventListener('click', () => {
		snake.changeDirection('Left');
	});
	document.getElementById('right-btn').addEventListener('click', () => {
		snake.changeDirection('Right');
	});

	window.addEventListener('keydown', ((evt) => {
		switch (evt.key) {
			case 'ArrowUp':
			case 'w':
				snake.changeDirection('Up');
				break;
			case 'ArrowDown':
			case 's':
				snake.changeDirection('Down');
				break;
			case 'ArrowLeft':
			case 'a':
				snake.changeDirection('Left');
				break;
			case 'ArrowRight':
			case 'd':
				snake.changeDirection('Right');
				break;
		}
	}));

	function Snake() {
		this.x = 0;
		this.y = 0;
		this.xSpeed = scale * 1;
		this.ySpeed = 0;
		this.total = 0;
		this.tail = [];

		this.draw = function() {
			ctx.fillStyle = "#FFFFFF";

			for (let i = 0; i < this.tail.length; i++) {
				ctx.fillRect(this.tail[i].x, this.tail[i].y, scale, scale);
			}

			ctx.fillRect(this.x, this.y, scale, scale);
		}

		this.update = function() {
			for (let i = 0; i < this.tail.length - 1; i++) {
				this.tail[i] = this.tail[i + 1];
			}

			this.tail[this.total - 1] = { x: this.x, y: this.y };

			this.x += this.xSpeed;
			this.y += this.ySpeed;

			if (this.x > canvas.width) {
				this.x = 0;
			}

			if (this.y > canvas.height) {
				this.y = 0;
			}

			if (this.x < 0) {
				this.x = canvas.width;
			}

			if (this.y < 0) {
				this.y = canvas.height;
			}
		}

		this.changeDirection = function(direction) {
			switch (direction) {
				case 'Up':
					this.xSpeed = 0;
					this.ySpeed = -scale * 1;
					break;
				case 'Down':
					this.xSpeed = 0;
					this.ySpeed = scale * 1;
					break;
				case 'Left':
					this.xSpeed = -scale * 1;
					this.ySpeed = 0;
					break;
				case 'Right':
					this.xSpeed = scale * 1;
					this.ySpeed = 0;
					break;
			}
		}

		this.eat = function(fruit) {
			if (this.x === fruit.x && this.y === fruit.y) {
				this.total++;
				return true;
			}

			return false;
		}

		this.checkCollision = function() {
			for (let i = 0; i < this.tail.length; i++) {
				if (this.x === this.tail[i].x && this.y === this.tail[i].y) {
					this.total = 0;
					this.tail = [];
				}
			}
		}
	}

	function Fruit() {
		this.x;
		this.y;

		this.pickLocation = function() {
			this.x = (Math.floor(Math.random() * columns - 1) + 1) * scale;
			this.y = (Math.floor(Math.random() * rows - 1) + 1) * scale;
		}

		this.draw = function() {
			ctx.fillStyle = "#4CAF50";
			ctx.fillRect(this.x, this.y, scale, scale);
		}
	}

</script>
