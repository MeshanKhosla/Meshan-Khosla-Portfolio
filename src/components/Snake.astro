---
---
<div class="flex flex-col items-center min-h-screen text-white">
  <canvas id="gameCanvas" class="bg-slate-800 w-full" width="400" height="200"></canvas>
  <div class="score" id="score">Score: 0</div>
  <div class="controls grid grid-cols-3 gap-2 mt-4">
    <button id="left-btn" class="btn col-start-1 bg-blue-600 p-2">Left</button>
    <button id="up-btn" class="btn col-start-2 bg-blue-600 p-2">Up</button>
    <button id="right-btn" class="btn col-start-3 bg-blue-600 p-2">Right</button>
    <button id="down-btn" class="btn col-start-2 bg-blue-600 p-2">Down</button>
  </div>
  <div class="text-xs text-gray-400">Use WASD or arrow keys</div>
</div>

<script>
	
	const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
	if (!canvas) {
		throw new Error('Canvas not found');
	}

  const ctx = canvas.getContext('2d');
  const scale = 10;
  const rows = canvas.height / scale;
  const columns = canvas.width / scale;

  let snake;
  let food;
  let gameInterval;

  function setup() {
    snake = new Snake();
    food = new Food();
    food.pickLocation();

    if (gameInterval) clearInterval(gameInterval);

    gameInterval = window.setInterval(() => {
      if (!document.getElementById('gameCanvas')) {
        clearInterval(gameInterval);
        return;
      }

      ctx.clearRect(0, 0, canvas.width, canvas.height);
      food.draw();
      snake.update();
      snake.draw();

      if (snake.eat(food)) {
        food.pickLocation();
      }

      snake.checkCollision();
      const score = document.getElementById('score');
      if (score) score.innerText = 'Score: ' + snake.total;
    }, 100);
  }

  setup();

  window.addEventListener('keydown', e => {
		// Disable arrow keys scrolling
		if (e.key.startsWith('Arrow')) {
			e.preventDefault();
		}

    const direction = e.key.replace('Arrow', '');
    snake.changeDirection(direction);
  });

  document.getElementById('left-btn').addEventListener('click', () => snake.changeDirection('Left'));
  document.getElementById('up-btn').addEventListener('click', () => snake.changeDirection('Up'));
  document.getElementById('right-btn').addEventListener('click', () => snake.changeDirection('Right'));
  document.getElementById('down-btn').addEventListener('click', () => snake.changeDirection('Down'));


function Snake() {
  this.x = 0;
  this.y = 0;
  this.xSpeed = scale * 1;
  this.ySpeed = 0;
  this.total = 0;
  this.tail = [];

  this.draw = function() {
    ctx.fillStyle = "#FFFFFF";

    for (let i = 0; i < this.tail.length; i++) {
      ctx.fillRect(this.tail[i].x, this.tail[i].y, scale, scale);
    }

    ctx.fillRect(this.x, this.y, scale, scale);
  };

  this.update = function() {
    for (let i = 0; i < this.tail.length - 1; i++) {
      this.tail[i] = this.tail[i + 1];
    }

    this.tail[this.total - 1] = { x: this.x, y: this.y };

    this.x += this.xSpeed;
    this.y += this.ySpeed;

    if (this.x >= canvas.width) {
      this.x = 0;
    }

    if (this.y >= canvas.height) {
      this.y = 0;
    }

    if (this.x < 0) {
      this.x = canvas.width - scale;
    }

    if (this.y < 0) {
      this.y = canvas.height - scale;
    }
  };

  this.changeDirection = function(direction) {
    switch(direction) {
			case 'w':
			case 'W':
      case 'Up':
        if (this.ySpeed === 0) {
          this.xSpeed = 0;
          this.ySpeed = -scale * 1;
        }
        break;
			case 's':
			case 'S':
      case 'Down':
        if (this.ySpeed === 0) {
          this.xSpeed = 0;
          this.ySpeed = scale * 1;
        }
        break;
			case 'a':
			case 'A':
      case 'Left':
        if (this.xSpeed === 0) {
          this.xSpeed = -scale * 1;
          this.ySpeed = 0;
        }
        break;
			case 'd':
			case 'D':
      case 'Right':
        if (this.xSpeed === 0) {
          this.xSpeed = scale * 1;
          this.ySpeed = 0;
        }
        break;
    }
  };

  this.eat = function(food) {
    if (this.x === food.x && this.y === food.y) {
      this.total++;
      return true;
    }

    return false;
  };

  this.checkCollision = function() {
    for (let i = 0; i < this.tail.length; i++) {
      if (this.x === this.tail[i].x && this.y === this.tail[i].y) {
        this.total = 0;
        this.tail = [];
      }
    }
  };
}

function Food() {
  this.x;
  this.y;

  this.pickLocation = function() {
    this.x = (Math.floor(Math.random() * columns - 1) + 1) * scale;
    this.y = (Math.floor(Math.random() * rows - 1) + 1) * scale;
  };

  this.draw = function() {
    ctx.fillStyle = "#4CAF50";
    ctx.fillRect(this.x, this.y, scale, scale);
  };
}
</script>

